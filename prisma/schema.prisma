// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  // relationMode = "prisma" // Consider if needed for foreign key behaviors
}

// --- Enums ---

enum Role {
  REGISTRY
  COORDINATOR
  LECTURER
  STAFF_REGISTRY // New role
}

enum Designation {
  ASSISTANT_LECTURER
  LECTURER
  SENIOR_LECTURER
  PROFESSOR
  ADMINISTRATIVE_STAFF
  TECHNICAL_STAFF
}

enum ClaimStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ClaimType {
  TEACHING
  TRANSPORTATION
  THESIS_PROJECT
}

enum TransportType {
  PUBLIC
  PRIVATE
}

enum ThesisType {
  SUPERVISION
  EXAMINATION
}

enum SupervisionRank {
  PHD
  MPHIL
  MA
  MSC
  BED
  BSC
  BA
  ED
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ProgramCategory {
  DIPLOMA
  UNDERGRADUATE
  POSTGRADUATE
}

enum CourseLevel {
  LEVEL_100
  LEVEL_200
  LEVEL_300
  LEVEL_400
  LEVEL_500
  LEVEL_600
}

enum AcademicSemester {
  FIRST_SEMESTER
  SECOND_SEMESTER
  THIRD_SEMESTER
}


// --- Models ---

model User {
  id                                  String                @id @default(cuid())
  email                               String                @unique
  name                                String?
  password                            String
  role                                Role
  designation                         Designation?
  createdAt                           DateTime              @default(now())
  updatedAt                           DateTime              @updatedAt
  
  lecturerCenterId                    String?             
  departmentId                        String?             

  bankName                            String?
  bankBranch                          String?
  accountName                         String?
  accountNumber                       String?               @unique
  phoneNumber                         String?

  Center_Center_coordinatorIdToUser   Center?               @relation("CenterCoordinator")
  Center_User_lecturerCenterIdToCenter Center?              @relation("CenterLecturers", fields: [lecturerCenterId], references: [id], onDelete: SetNull)
  Department                          Department?           @relation("DepartmentLecturers", fields: [departmentId], references: [id], onDelete: SetNull)
  
  Claim_Claim_submittedByIdToUser     Claim[]               @relation("LecturerClaims")
  Claim_Claim_processedByIdToUser     Claim[]               @relation("ProcessorClaims")
  
  SupervisedStudent                   SupervisedStudent[]   @relation("SupervisorStudents")
  
  approvedSignupRequest               SignupRequest?        @relation("ApprovedUserRequest", fields: [approvedSignupRequestId], references: [id], onDelete: SetNull)
  approvedSignupRequestId             String?               @unique 
  
  processedSignupRequests             SignupRequest[]       @relation("RegistryProcessor")

  staffRegistryCenterAssignments      StaffRegistryCenterAssignment[] @relation("UserToStaffAssignments")
  
  // NEW: Relation for LecturerCourseAssignment (many-to-many with Course)
  lecturerCourseAssignments           LecturerCourseAssignment[] @relation("LecturerCourses")

  @@index([lecturerCenterId])
  @@index([departmentId])
  @@index([approvedSignupRequestId])
  @@index([phoneNumber])
}

model SignupRequest {
  id                                  String          @id @default(cuid())
  name                                String
  email                               String          @unique
  hashedPassword                      String
  requestedRole                       Role            
  requestedCenterId                   String?         

  bankName                            String?
  bankBranch                          String?
  accountName                         String?
  accountNumber                       String?
  phoneNumber                         String?
  
  status                              RequestStatus   @default(PENDING)
  submittedAt                         DateTime        @default(now())
  processedAt                         DateTime?
  processedByRegistryId               String?         
  registryProcessor                   User?           @relation("RegistryProcessor", fields: [processedByRegistryId], references: [id], onDelete: SetNull)
  approvedUser                        User?           @relation("ApprovedUserRequest")

  @@index([status])
  @@index([processedByRegistryId])
  @@index([requestedCenterId])
  @@index([accountNumber])
  @@index([phoneNumber])
}

model Center {
  id                                  String          @id @default(cuid())
  name                                String          @unique
  createdAt                           DateTime        @default(now())
  updatedAt                           DateTime        @updatedAt
  
  coordinatorId                       String          @unique 
  coordinator                         User            @relation("CenterCoordinator", fields: [coordinatorId], references: [id])
  
  lecturers                           User[]          @relation("CenterLecturers") 
  departments                         Department[]    @relation("CenterDepartments")
  claims                              Claim[]         @relation("CenterClaims")

  staffRegistryAssignments            StaffRegistryCenterAssignment[] @relation("CenterToStaffAssignments")
}

// EXPLICIT JOIN TABLE for StaffRegistry User and Center Assignments
model StaffRegistryCenterAssignment {
  id          String   @id @default(cuid())
  userId      String
  centerId    String
  assignedAt  DateTime @default(now())

  user        User     @relation("UserToStaffAssignments", fields: [userId], references: [id], onDelete: Cascade)
  center      Center   @relation("CenterToStaffAssignments", fields: [centerId], references: [id], onDelete: Cascade)

  @@unique([userId, centerId])
  @@index([userId])
  @@index([centerId])
}

model Department {
  id          String     @id @default(cuid())
  name        String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  centerId    String
  center      Center     @relation("CenterDepartments", fields: [centerId], references: [id], onDelete: Cascade)
  lecturers   User[]     @relation("DepartmentLecturers")
  programs    Program[] @relation("DepartmentPrograms")
}

model Program {
  id              String          @id @default(cuid())
  programCode     String          @unique // e.g., "BSc-CS", "MA-EDUC"
  programTitle    String
  programCategory ProgramCategory
  departmentId    String
  department      Department      @relation("DepartmentPrograms", fields: [departmentId], references: [id], onDelete: Cascade)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  courses         Course[]        @relation("ProgramCourses")

  @@unique([programCode, departmentId])
  @@index([departmentId])
  @@index([programCategory])
}

model Course {
  id                String           @id @default(cuid())
  courseCode        String           @unique // e.g., "CSCD101" - assuming unique system-wide
  courseTitle       String
  creditHours       Float
  level             CourseLevel
  academicSemester  AcademicSemester
  
  programId         String
  program           Program          @relation("ProgramCourses", fields: [programId], references: [id], onDelete: Cascade)
  
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  // NEW: Relation for LecturerCourseAssignment (many-to-many with User)
  lecturerAssignments LecturerCourseAssignment[] @relation("CourseLecturers")

  @@unique([courseCode, programId, level, academicSemester])
  @@index([programId])
  @@index([courseCode])
  @@index([level])
  @@index([academicSemester])
}

// NEW MODEL: LecturerCourseAssignment - Explicit many-to-many join table
model LecturerCourseAssignment {
  id          String    @id @default(cuid())
  lecturerId  String
  courseId    String
  assignedAt  DateTime  @default(now())

  lecturer    User      @relation("LecturerCourses", fields: [lecturerId], references: [id], onDelete: Cascade)
  course      Course    @relation("CourseLecturers", fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([lecturerId, courseId]) // A lecturer is assigned to a specific course only once
  @@index([lecturerId])
  @@index([courseId])
}


model Claim {
  id                        String             @id @default(cuid())
  claimType                 ClaimType
  status                    ClaimStatus        @default(PENDING)
  submittedAt               DateTime           @default(now())
  updatedAt                 DateTime           @updatedAt
  processedAt               DateTime?
  submittedById             String             
  centerId                  String             
  processedById             String?            

  // Teaching fields
  teachingDate              DateTime?
  teachingStartTime         String?            
  teachingEndTime           String?            
  teachingHours             Float?             
  courseTitle               String?            
  courseCode                String?            

  // Transportation details specific to a Teaching Claim
  transportToTeachingInDate DateTime?
  transportToTeachingFrom   String?
  transportToTeachingTo     String?
  transportToTeachingOutDate DateTime?
  transportToTeachingReturnFrom String?
  transportToTeachingReturnTo String?
  transportToTeachingDistanceKM Float?           

  // General Transportation fields
  transportType             TransportType?
  transportDestinationTo    String?
  transportDestinationFrom  String?
  transportRegNumber        String?
  transportCubicCapacity    Int?
  transportAmount           Float?

  // Thesis/Project fields
  thesisType                ThesisType?
  thesisSupervisionRank     SupervisionRank?
  thesisExamCourseCode      String?
  thesisExamDate            DateTime?

  // Relations
  submittedBy               User                @relation("LecturerClaims", fields: [submittedById], references: [id], onDelete: Cascade)
  center                    Center              @relation("CenterClaims", fields: [centerId], references: [id], onDelete: Cascade)
  processedBy               User?               @relation("ProcessorClaims", fields: [processedById], references: [id], onDelete: SetNull)
  supervisedStudents        SupervisedStudent[] @relation("ClaimStudents")

  @@index([submittedById])
  @@index([centerId])
  @@index([processedById])
  @@index([claimType])
  @@index([status])
}

model SupervisedStudent {
  id           String @id @default(cuid())
  studentName  String
  thesisTitle  String
  claimId      String 
  supervisorId String 
  
  claim        Claim  @relation("ClaimStudents", fields: [claimId], references: [id], onDelete: Cascade)
  supervisor   User   @relation("SupervisorStudents", fields: [supervisorId], references: [id], onDelete: Cascade)

  @@index([claimId])
  @@index([supervisorId])
}